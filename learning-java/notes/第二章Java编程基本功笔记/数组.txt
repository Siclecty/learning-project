数组的定义
数组就是用来存储一批同种类型数据的容器;

静态初始化数组:
定义数组的时候直接给数组赋值;

格式:
数据类型[]  数组名 = { 元素1，元素2 ，元素3，… };int[] ages = {12, 24, 36, 48, 60};
double[] scores = {89.9, 99.5, 59.5};

数组是属于什么类型，数组变量名中存储的是什么:
引用数据类型，存储的数组在内存中的地址信息;

访问数组的元素
数组名称[索引];

访问数组的长度
数组名称.length;

数组的最大索引
数组名. length – 1(元素大于0);

数组的几个注意事项
“数据类型[] 数组名”也可以写成 “数据类型 数组名[] ”;
什么类型的数组存放什么类型的数据，否则报错;
数组一旦定义出来，程序执行的过程中，长度、类型就固定了;

动态初始化数组
定义数组的时候只确定元素的类型和数组的长度，之后再存入具体数据;

格式:
数据类型[]  数组名 = new 数据类型[长度];
int[] ages = new int[4];

两种数组定义时的特点和场景有什么区别
当前已经知道存入的元素值，用静态初始化;
当前还不清楚要存入哪些数据，用动态初始化;

动态初始化数组后元素的默认值是什么样的:
byte、short、int 、char、long类型数组元素的默认值都是0;
float、double类型数组元素的默认值都是0.0;
boolean类型数组元素的默认值是false、String类型数组元素的默认值是null;

数组的遍历
一个一个的访问数组中的数据;

数组使用常见问题:
如果访问的元素位置超过最大索引，执行时会出现ArrayIndexOutOfBoundsException异常;
如果数组变量中没有存储数组的地址，而是null, 在访问数组信息时会出现NullPointerException异常;
